version: '3.8'

# Full-featured local deployment with multiple database options
# Includes Ollama, ChromaDB, Qdrant, and monitoring

services:
  # Ollama service for LLM
  ollama:
    image: ollama/ollama:latest
    container_name: fichat-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    command: serve
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fichat-net

  # Pull models automatically
  ollama-pull:
    image: ollama/ollama:latest
    container_name: fichat-ollama-pull
    depends_on:
      ollama:
        condition: service_healthy
    entrypoint: >
      sh -c "
        ollama pull llama2 &&
        ollama pull mistral &&
        ollama pull phi &&
        echo 'Models pulled successfully'
      "
    environment:
      - OLLAMA_HOST=http://ollama:11434
    networks:
      - fichat-net

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: fichat-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - fichat-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant for advanced vector search
  qdrant:
    image: qdrant/qdrant:latest
    container_name: fichat-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__LOG_LEVEL=INFO
    networks:
      - fichat-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: fichat-postgres
    environment:
      POSTGRES_DB: fichat_rag
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fichat-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d fichat_rag"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main RAG API service
  fichat-rag:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fichat-rag
    ports:
      - "8000:8000"
    environment:
      # LLM Configuration
      - LLM_PROVIDER=ollama
      - LLM_MODEL=${OLLAMA_MODEL:-llama2}
      - OLLAMA_BASE_URL=http://ollama:11434
      
      # Vector Store Configuration (can be changed via env)
      - VECTOR_STORE_TYPE=${VECTOR_STORE_TYPE:-chromadb}
      
      # ChromaDB settings
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      
      # Qdrant settings
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      
      # PostgreSQL settings
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=fichat_rag
      - POSTGRES_USER=rag_user
      - POSTGRES_PASSWORD=rag_pass
      
      # Embeddings
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-sentence-transformers/all-mpnet-base-v2}
      - EMBEDDING_DEVICE=${EMBEDDING_DEVICE:-cpu}
      
      # Performance
      - CHUNK_SIZE=${CHUNK_SIZE:-1000}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-100}
      - RETRIEVAL_TOP_K=${RETRIEVAL_TOP_K:-5}
      
      # Logging
      - LOG_LEVEL=INFO
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./documents:/app/documents
    depends_on:
      ollama:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - fichat-net
    command: uvicorn src.api:app --host 0.0.0.0 --port 8000 --reload

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: fichat-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - fichat-net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fichat-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-dashboards:/var/lib/grafana/dashboards
    networks:
      - fichat-net
    depends_on:
      - prometheus

volumes:
  ollama_data:
  chroma_data:
  qdrant_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  fichat-net:
    driver: bridge

# Usage:
# 1. Choose vector store: export VECTOR_STORE_TYPE=chromadb (or qdrant, postgres)
# 2. Choose model: export OLLAMA_MODEL=llama2 (or mistral, phi)
# 3. Run: docker-compose -f docker-compose.local-full.yml up
# 4. Access:
#    - API: http://localhost:8000
#    - ChromaDB UI: http://localhost:8001
#    - Qdrant UI: http://localhost:6333/dashboard
#    - Grafana: http://localhost:3000 (admin/admin)